// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	io "io"

	resources "github.com/jumppad-labs/jumppad/pkg/config/resources"
	mock "github.com/stretchr/testify/mock"

	types "github.com/jumppad-labs/jumppad/pkg/clients/types"
)

// ContainerTasks is an autogenerated mock type for the ContainerTasks type
type ContainerTasks struct {
	mock.Mock
}

// AttachNetwork provides a mock function with given fields: network, containerid, aliases, ipaddress
func (_m *ContainerTasks) AttachNetwork(network string, containerid string, aliases []string, ipaddress string) error {
	ret := _m.Called(network, containerid, aliases, ipaddress)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string, string) error); ok {
		r0 = rf(network, containerid, aliases, ipaddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuildContainer provides a mock function with given fields: config, force
func (_m *ContainerTasks) BuildContainer(config *resources.Build, force bool) (string, error) {
	ret := _m.Called(config, force)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*resources.Build, bool) (string, error)); ok {
		return rf(config, force)
	}
	if rf, ok := ret.Get(0).(func(*resources.Build, bool) string); ok {
		r0 = rf(config, force)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*resources.Build, bool) error); ok {
		r1 = rf(config, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerInfo provides a mock function with given fields: id
func (_m *ContainerTasks) ContainerInfo(id string) (interface{}, error) {
	ret := _m.Called(id)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerLogs provides a mock function with given fields: id, stdOut, stdErr
func (_m *ContainerTasks) ContainerLogs(id string, stdOut bool, stdErr bool) (io.ReadCloser, error) {
	ret := _m.Called(id, stdOut, stdErr)

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool, bool) (io.ReadCloser, error)); ok {
		return rf(id, stdOut, stdErr)
	}
	if rf, ok := ret.Get(0).(func(string, bool, bool) io.ReadCloser); ok {
		r0 = rf(id, stdOut, stdErr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool, bool) error); ok {
		r1 = rf(id, stdOut, stdErr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyFileToContainer provides a mock function with given fields: id, src, dst
func (_m *ContainerTasks) CopyFileToContainer(id string, src string, dst string) error {
	ret := _m.Called(id, src, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(id, src, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyFilesToVolume provides a mock function with given fields: volume, files, path, force
func (_m *ContainerTasks) CopyFilesToVolume(volume string, files []string, path string, force bool) ([]string, error) {
	ret := _m.Called(volume, files, path, force)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string, string, bool) ([]string, error)); ok {
		return rf(volume, files, path, force)
	}
	if rf, ok := ret.Get(0).(func(string, []string, string, bool) []string); ok {
		r0 = rf(volume, files, path, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string, string, bool) error); ok {
		r1 = rf(volume, files, path, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyFromContainer provides a mock function with given fields: id, src, dst
func (_m *ContainerTasks) CopyFromContainer(id string, src string, dst string) error {
	ret := _m.Called(id, src, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(id, src, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyLocalDockerImagesToVolume provides a mock function with given fields: images, volume, force
func (_m *ContainerTasks) CopyLocalDockerImagesToVolume(images []string, volume string, force bool) ([]string, error) {
	ret := _m.Called(images, volume, force)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, string, bool) ([]string, error)); ok {
		return rf(images, volume, force)
	}
	if rf, ok := ret.Get(0).(func([]string, string, bool) []string); ok {
		r0 = rf(images, volume, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, string, bool) error); ok {
		r1 = rf(images, volume, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainer provides a mock function with given fields: _a0
func (_m *ContainerTasks) CreateContainer(_a0 *resources.Container) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*resources.Container) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*resources.Container) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*resources.Container) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateShell provides a mock function with given fields: id, command, stdin, stdout, stderr
func (_m *ContainerTasks) CreateShell(id string, command []string, stdin io.ReadCloser, stdout io.Writer, stderr io.Writer) error {
	ret := _m.Called(id, command, stdin, stdout, stderr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, io.ReadCloser, io.Writer, io.Writer) error); ok {
		r0 = rf(id, command, stdin, stdout, stderr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVolume provides a mock function with given fields: name
func (_m *ContainerTasks) CreateVolume(name string) (string, error) {
	ret := _m.Called(name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNetwork provides a mock function with given fields: network, containerid
func (_m *ContainerTasks) DetachNetwork(network string, containerid string) error {
	ret := _m.Called(network, containerid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(network, containerid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EngineInfo provides a mock function with given fields:
func (_m *ContainerTasks) EngineInfo() *types.EngineInfo {
	ret := _m.Called()

	var r0 *types.EngineInfo
	if rf, ok := ret.Get(0).(func() *types.EngineInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.EngineInfo)
		}
	}

	return r0
}

// ExecuteCommand provides a mock function with given fields: id, command, env, workingDirectory, user, group, timeout, writer
func (_m *ContainerTasks) ExecuteCommand(id string, command []string, env []string, workingDirectory string, user string, group string, timeout int, writer io.Writer) (int, error) {
	ret := _m.Called(id, command, env, workingDirectory, user, group, timeout, writer)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string, []string, string, string, string, int, io.Writer) (int, error)); ok {
		return rf(id, command, env, workingDirectory, user, group, timeout, writer)
	}
	if rf, ok := ret.Get(0).(func(string, []string, []string, string, string, string, int, io.Writer) int); ok {
		r0 = rf(id, command, env, workingDirectory, user, group, timeout, writer)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, []string, []string, string, string, string, int, io.Writer) error); ok {
		r1 = rf(id, command, env, workingDirectory, user, group, timeout, writer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindContainerIDs provides a mock function with given fields: fqdn
func (_m *ContainerTasks) FindContainerIDs(fqdn string) ([]string, error) {
	ret := _m.Called(fqdn)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(fqdn)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(fqdn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fqdn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindImageInLocalRegistry provides a mock function with given fields: image
func (_m *ContainerTasks) FindImageInLocalRegistry(image resources.Image) (string, error) {
	ret := _m.Called(image)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(resources.Image) (string, error)); ok {
		return rf(image)
	}
	if rf, ok := ret.Get(0).(func(resources.Image) string); ok {
		r0 = rf(image)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(resources.Image) error); ok {
		r1 = rf(image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindImagesInLocalRegistry provides a mock function with given fields: filter
func (_m *ContainerTasks) FindImagesInLocalRegistry(filter string) ([]string, error) {
	ret := _m.Called(filter)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworks provides a mock function with given fields: id
func (_m *ContainerTasks) ListNetworks(id string) []resources.NetworkAttachment {
	ret := _m.Called(id)

	var r0 []resources.NetworkAttachment
	if rf, ok := ret.Get(0).(func(string) []resources.NetworkAttachment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resources.NetworkAttachment)
		}
	}

	return r0
}

// PullImage provides a mock function with given fields: image, force
func (_m *ContainerTasks) PullImage(image resources.Image, force bool) error {
	ret := _m.Called(image, force)

	var r0 error
	if rf, ok := ret.Get(0).(func(resources.Image, bool) error); ok {
		r0 = rf(image, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveContainer provides a mock function with given fields: id, force
func (_m *ContainerTasks) RemoveContainer(id string, force bool) error {
	ret := _m.Called(id, force)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(id, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveImage provides a mock function with given fields: id
func (_m *ContainerTasks) RemoveImage(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveVolume provides a mock function with given fields: name
func (_m *ContainerTasks) RemoveVolume(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetForcePull provides a mock function with given fields: _a0
func (_m *ContainerTasks) SetForcePull(_a0 bool) {
	_m.Called(_a0)
}

type mockConstructorTestingTNewContainerTasks interface {
	mock.TestingT
	Cleanup(func())
}

// NewContainerTasks creates a new instance of ContainerTasks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContainerTasks(t mockConstructorTestingTNewContainerTasks) *ContainerTasks {
	mock := &ContainerTasks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
